infochimps Voronoi

Created by Hohyon Ryu, Aug/22/2011

* Dependencies

 - shapely : sudo apt-get install python-shapely
 - matplotlib (pylab) : sudo apt-get install python-matplotlib
 - Built on Steve Fortune's Python Voronoi Code
   Steve Fortune's homepage: http://netlib.bell-labs.com/cm/cs/who/sjf/index.html

* Files

  README
  globalmaptiles.py - Google Geo-coordinate Library
  voronoi.py        - Voronoi lattice library (line and vertices based)
  voronoi_poly.py   - Voronoi lattice library (polygon based)

  sample_city_data.csv - sample data

  main_example.py   - code example


* Inputs:
  1. Dictionary of the points: (You can use simple sequential number for the dictionary keys or some text to associate with.)
    PointsMap={}
    PointsMap["stationA"]=(-143.22, 38.22)
    PointsMap["stationB"]=(-122.22, 56.22)
    PointsMap[1]=(-122.22, 56.22)

  2. The bounding box (left_top_x, left_top_y, bottom_right_x, bottom_right,y) to generate a voronoi lattice.
    Bounding Box Options: You can either use the name or the coordinates
    "AUSTIN" [30.8, -98.5, 29.535, -97.031]
    "TX" [36.5, -106, 25, -93]
    "US" [55, -130, 23, -60]
    "GUS" [60, -140, 22, -50]
    "KR" [45, 120, 32, 135] (Korea)
    "W" [90, -180, -90, 180] (World, Default)

  3. PlotMap: shows the voronoi lattice on a map. This may be extremely slow if you have more than 1M points. (Default is False, Not available for VoronoiLineEdges)


* Output options:
  1. Stations, Lines and edges
    Example:
    import voronoi_poly
    vl=voronoi_poly.VoronoiLineEdges(PointsMap)

    Output:
      vertices, lines, edges, station_to_edge
          (1) a list of 2-tuples, which are the x,y coordinates of the 
              Voronoi diagram vertices
          (2) a list of 3-tuples (a,b,c) which are the equations of the
              lines in the Voronoi diagram: a*x + b*y = c
          (3) a list of 3-tuples, (l, v1, v2) representing edges of the 
              Voronoi diagram.  l is the index of the line, v1 and v2 are
              the indices of the vetices at the end of the edge.  If 
              v1 or v2 is -1, the line extends to infinity.    
          (4) a dictionary, where keys are the station numbers(vertices), and the 
              values are the number of edges surrounding the vertice.

  2. Polygons
    import voronoi_poly
    vl=voronoi_poly.VoronoiPolygons(PointsMap, BoundingBox="AUSTIN", PlotMap=False)
    Output:
      185: {'coordinate': (3.04, 36.77), 'info': 'Algiers/Algeria', 'obj_polygon': <shapely.geometry.polygon.Polygon object at 0x3152190>}
      
      - You can access the polygon coordinates by the following example:

        from shapely.geometry import Polygon      
        print list(polygon_data.exterior.coords)

  3. Quadkey-based Grids on Polygons
    import voronoi_poly

    vl=voronoi_poly.VoronoiPolygons(PointsMap, BoundingBox="W", PlotMap=False)
    voronoi_poly.GridVoronoi(vl, zl=7, PlotMap=True)  
    Output: Quadkey, Station_name, Longitude, Latitude

  4. GeoJson Polygons
    import voronoi_poly
    voronoi_poly.VoronoiGeoJson_Polygons(PointsMap, BoundingBox="US")
    Output:
      Geojson Polygons

  5. GeoJson MultiPolygons
    import voronoi_poly
    voronoi_poly.VoronoiGeoJson_MultiPolygons(PointsMap, BoundingBox="KR")
    Output:
      Geojson MiltiPolygons
      infochimps Voronoi

由Hohyon Ryu创作，2011年8月/ 22日

*依赖

  - 身材匀称：sudo apt-get安装python-shapely
  - matplotlib（pylab）：sudo apt-get install python-matplotlib
  - 基于Steve Fortune的Python Voronoi代码
   史蒂夫·福特的主页：http://netlib.bell-labs.com/cm/cs/who/sjf/index.html

*文件

  读我
  globalmaptiles.py - Google地理坐标库
  voronoi.py - Voronoi格子库（基于线和顶点）
  voronoi_poly.py - Voronoi格子库（基于多边形）

  sample_city_data.csv - 示例数据

  main_example.py - 代码示例


*输入：
  1.要点词典：（您可以使用简单的序列号作为字典键或一些文本关联。）
    PointsMap = {}
    PointMap [“stationA”] =（ - 143.22,38.22）
    PointsMap [“stationB”] =（ - 122.22,56.22）
    PointsMap [1] =（ - 122.22,56.22）

  2.边界框（left_top_x，left_top_y，bottom_right_x，bottom_right，y）生成voronoi格。
    边界框选项：您可以使用名称或坐标
    “奥斯汀”[30.8，-98.5，29.535，-97.031]
    “TX”[36.5，-106，25，-93]
    “美国”[55，-130，23，-60]
    “GUS”[60，-140，22，-50]
    “KR”[45,120,32,135]（韩国）
    “W”[90，-180，-90，180]（世界，默认）

  3. PlotMap：显示地图上的voronoi格子。如果你有超过1M点，这可能会非常慢。 （默认为False，不可用于VoronoiLineEdges）


*输出选项：
  1.站，线和边缘
    例：
    导入voronoi_poly
    VL = voronoi_poly.VoronoiLineEdges（PointsMap）

    输出：
      顶点，线，边，station_to_edge
          （1）2元组的列表，这是2的元组的x，y坐标
              Voronoi图顶点
          （2）三元组（a，b，c）的列表，其是方程式
              Voronoi图中的线：a * x + b * y = c
          （3）表示三元组的列表（l，v1，v2）
              Voronoi图。 l是行的索引，v1和v2是
              在边缘结束时的指数。如果
              v1或v2是-1，则该行延伸至无穷大。
          （4）字典，其中键是站号（顶点），而键
              值是围绕顶点的边的数量。

  2.多边形
    导入voronoi_poly
    vl = voronoi_poly.VoronoiPolygons（PointsMap，BoundingBox =“AUSTIN”，PlotMap = False）
    输出：
      185：{'coordinate'：（3.04,36.77），'info'：'Algiers / Algeria'，'obj_polygon'：<shapely.geometry.polygon.Polygon object at 0x3152190>}

       - 您可以通过以下示例访问多边形坐标：

        从shapely.geometry导入多边形
        打印列表（polygon_data.exterior.coords）

  3.基于四边形的多边形网格
    导入voronoi_poly

    vl = voronoi_poly.VoronoiPolygons（PointsMap，BoundingBox =“W”，PlotMap = False）
    voronoi_poly.GridVoronoi（v1，zl = 7，PlotMap = True）
    输出：Quadkey，Station_name，Longitude，Latitude

  4. GeoJson多边形
    导入voronoi_poly
    voronoi_poly.VoronoiGeoJson_Polygons（PointsMap，BoundingBox =“US”）
    输出：
      Geojson多边形

  5. GeoJson MultiPolygons
    导入voronoi_poly
    voronoi_poly.VoronoiGeoJson_MultiPolygons（PointsMap，BoundingBox =“KR”）
    输出：
      Geojson MiltiPolygons


    
